D G "__PCM__" 0 95 ""5.015""
D G "__DEVICE__" 0 95 "716"
D G "__DATE__" 0 95 ""04-abr.-24""
D G "__TIME__" 0 95 ""11:29:45"" "Prototipo Sonido Binaural                              //"
c L "set_tris_a" 2 1 6 "FUNCTION"
v L "value" 2 35 "int8" `53 
f B "set_tris_a" 2 35 "void(int8 value)" `52 
v L "value" 2 36 "int8" `55 
f B "set_tris_b" 2 36 "void(int8 value)" `54 
f B "get_tris_a" 2 37 "int8()" `56 
f B "get_tris_b" 2 38 "int8()" `57 
v L "value" 2 39 "int8" `59 
f B "output_a" 2 39 "void(int8 value)" `58 
v L "value" 2 40 "int8" `61 
f B "output_b" 2 40 "void(int8 value)" `60 
f B "input_a" 2 41 "int8()" `62 
f B "input_b" 2 42 "int8()" `63 
f B "input_change_a" 2 43 "int8()" `64 
f B "input_change_b" 2 44 "int8()" `65 
v L "pin" 2 45 "int16" `67 
f B "input" 2 45 "int8(int16 pin)" `66 
v L "pin" 2 46 "int16" `69 
f B "input_state" 2 46 "int8(int16 pin)" `68 
v L "pin" 2 47 "int16" `71 
f B "output_low" 2 47 "void(int16 pin)" `70 
v L "pin" 2 48 "int16" `73 
f B "output_high" 2 48 "void(int16 pin)" `72 
v L "pin" 2 49 "int16" `75 
f B "output_toggle" 2 49 "void(int16 pin)" `74 
v L "pin" 2 50 "int16" `77 
v L "level" 2 50 "int8" `78 
f B "output_bit" 2 50 "void(int16 pin,int8 level)" `76 
v L "pin" 2 51 "int16" `80 
f B "output_float" 2 51 "void(int16 pin)" `79 
v L "pin" 2 52 "int16" `82 
f B "output_drive" 2 52 "void(int16 pin)" `81  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 56 "40"
d G "PIN_A1" 2 57 "41"
d G "PIN_A2" 2 58 "42"
d G "PIN_A3" 2 59 "43"
d G "PIN_A4" 2 60 "44"
d G "PIN_B0" 2 62 "48"
d G "PIN_B1" 2 63 "49"
d G "PIN_B2" 2 64 "50"
d G "PIN_B3" 2 65 "51"
d G "PIN_B4" 2 66 "52"
d G "PIN_B5" 2 67 "53"
d G "PIN_B6" 2 68 "54"
d G "PIN_B7" 2 69 "55"
d G "FALSE" 2 72 "0"
d G "TRUE" 2 73 "1"
d G "BYTE" 2 75 "int8"
d G "BOOLEAN" 2 76 "int1"
d G "getc" 2 78 "getch"
d G "fgetc" 2 79 "getch"
d G "getchar" 2 80 "getch"
d G "putc" 2 81 "putchar"
d G "fputc" 2 82 "putchar"
d G "fgets" 2 83 "gets"
d G "fputs" 2 84 "puts"
c L "output_drive" 2 1 3 "FUNCTION"
f B "restart_cause" 2 89 "int8()" `83 
f B "reset_cpu" 2 90 "void()" `84 
f B "sleep" 2 91 "void()" `85  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 93 "3"
d G "WDT_TIMEOUT" 2 94 "11"
d G "MCLR_FROM_SLEEP" 2 95 "19"
d G "MCLR_FROM_RUN" 2 96 "27"
d G "NORMAL_POWER_UP" 2 97 "25"
d G "BROWNOUT_RESTART" 2 98 "26"
c L "sleep" 2 1 5 "FUNCTION"
v L "mode" 2 105 "int8" `87 
f B "setup_timer_0" 2 105 "void(int8 mode)" `86 
v L "value" 2 106 "int8" `89 
f B "set_timer0" 2 106 "void(int8 value)" `88 
f B "get_timer0" 2 107 "int8()" `90 
v L "mode" 2 108 "int8" `92 
v L "prescaler" 2 108 "int8" `93 
f B "setup_counters" 2 108 "void(int8 mode,int8 prescaler)" `91 
v L "value" 2 109 "int8" `95 
f B "set_rtcc" 2 109 "void(int8 value)" `94 
f B "get_rtcc" 2 110 "int8()" `96  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 112 "0"
d G "T0_EXT_L_TO_H" 2 113 "32"
d G "T0_EXT_H_TO_L" 2 114 "48"
d G "T0_DIV_1" 2 116 "8"
d G "T0_DIV_2" 2 117 "0"
d G "T0_DIV_4" 2 118 "1"
d G "T0_DIV_8" 2 119 "2"
d G "T0_DIV_16" 2 120 "3"
d G "T0_DIV_32" 2 121 "4"
d G "T0_DIV_64" 2 122 "5"
d G "T0_DIV_128" 2 123 "6"
d G "T0_DIV_256" 2 124 "7"
d G "T0_8_BIT" 2 127 "0"
d G "RTCC_INTERNAL" 2 129 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 130 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 131 "48"
d G "RTCC_DIV_1" 2 132 "8"
d G "RTCC_DIV_2" 2 133 "0"
d G "RTCC_DIV_4" 2 134 "1"
d G "RTCC_DIV_8" 2 135 "2"
d G "RTCC_DIV_16" 2 136 "3"
d G "RTCC_DIV_32" 2 137 "4"
d G "RTCC_DIV_64" 2 138 "5"
d G "RTCC_DIV_128" 2 139 "6"
d G "RTCC_DIV_256" 2 140 "7"
d G "RTCC_8_BIT" 2 141 "0"
c L "get_rtcc" 2 1 8 "FUNCTION"
v L "mode" 2 152 "int16" `98 
f B "setup_wdt" 2 152 "void(int16 mode)" `97 
f B "restart_wdt" 2 153 "void()" `99  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 156 "8"
d G "WDT_36MS" 2 157 "9"
d G "WDT_72MS" 2 158 "10"
d G "WDT_144MS" 2 159 "11"
d G "WDT_288MS" 2 160 "12"
d G "WDT_576MS" 2 161 "13"
d G "WDT_1152MS" 2 162 "14"
d G "WDT_2304MS" 2 163 "15"
c L "restart_wdt" 2 1 3 "FUNCTION"
v L "mode" 2 169 "int16" `101 
f B "setup_timer_1" 2 169 "void(int16 mode)" `100 
f B "get_timer1" 2 170 "int16()" `102 
v L "value" 2 171 "int16" `104 
f B "set_timer1" 2 171 "void(int16 value)" `103  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 174 "0"
d G "T1_INTERNAL" 2 175 "0x85"
d G "T1_EXTERNAL" 2 176 "0x87"
d G "T1_EXTERNAL_SYNC" 2 177 "0x83"
d G "T1_CLK_OUT" 2 179 "8"
d G "T1_DIV_BY_1" 2 181 "0"
d G "T1_DIV_BY_2" 2 182 "0x10"
d G "T1_DIV_BY_4" 2 183 "0x20"
d G "T1_DIV_BY_8" 2 184 "0x30"
c L "set_timer1" 2 1 3 "FUNCTION"
v L "mode" 2 189 "int8" `106 
v L "period" 2 189 "int8" `107 
v L "postscale" 2 189 "int8" `108 
f B "setup_timer_2" 2 189 "void(int8 mode,int8 period,int8 postscale)" `105 
f B "get_timer2" 2 190 "int8()" `109 
v L "value" 2 191 "int8" `111 
f B "set_timer2" 2 191 "void(int8 value)" `110  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 193 "0"
d G "T2_DIV_BY_1" 2 194 "4"
d G "T2_DIV_BY_4" 2 195 "5"
d G "T2_DIV_BY_16" 2 196 "6"
c L "set_timer2" 2 1 4 "FUNCTION"
v L "mode" 2 202 "int32" `113 
f B "setup_ccp1" 2 202 "void(int32 mode)" `112 
v L "mode" 2 203 "int32" `115 
v L "pwm" 2 203 "int8" `116 
f G "setup_ccp1" 2 203 "void(int32 mode,int8 pwm)" `114 
v L "value" 2 204 "int16" `118 
f B "set_pwm1_duty" 2 204 "void(int16 value)" `117  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 206 "0"
d G "CCP_CAPTURE_FE" 2 207 "4"
d G "CCP_CAPTURE_RE" 2 208 "5"
d G "CCP_CAPTURE_DIV_4" 2 209 "6"
d G "CCP_CAPTURE_DIV_16" 2 210 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 211 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 212 "9"
d G "CCP_COMPARE_INT" 2 213 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 214 "0xB"
d G "CCP_PWM" 2 215 "0xC"
d G "CCP_PWM_PLUS_1" 2 216 "0x1c"
d G "CCP_PWM_PLUS_2" 2 217 "0x2c"
d G "CCP_PWM_PLUS_3" 2 218 "0x3c"
d G "CCP_PWM_H_H" 2 223 "0x0c"
d G "CCP_PWM_H_L" 2 224 "0x0d"
d G "CCP_PWM_L_H" 2 225 "0x0e"
d G "CCP_PWM_L_L" 2 226 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 228 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 229 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 230 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 232 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 233 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 234 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 235 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 236 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 237 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 238 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 240 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 241 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 242 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 244 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 245 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 246 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 248 "0x80000000"
c L "set_pwm1_duty" 2 1 4 "FUNCTION"
v L "mode" 2 255 "int16" `123 
f B "setup_adc" 2 255 "void(int16 mode)" `122 
f B "read_adc" 2 256 "int8()" `124 
v L "mode" 2 257 "int8" `126 
f G "read_adc" 2 257 "int8(int8 mode)" `125 
f G "read_adc" 2 258 "int16()" `127 
v L "mode" 2 259 "int8" `129 
f G "read_adc" 2 259 "int16(int8 mode)" `128 
f B "adc_done" 2 260 "int8()" `130  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 262 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 263 "0x100"
d G "ADC_CLOCK_DIV_8" 2 264 "0x40"
d G "ADC_CLOCK_DIV_32" 2 265 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 266 "0xc0" "Internal 2-6us"
c L "adc_done" 2 1 1 "FUNCTION"
v L "setting" 2 269 "int8" `132 
f B "setup_adc_ports" 2 269 "void(int8 setting)" `131 
v L "channel" 2 270 "int8" `134 
f B "set_adc_channel" 2 270 "void(int8 channel)" `133  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 272 "7" "None"
d G "ALL_ANALOG" 2 273 "0" "A0 A1 A2 A3"
d G "AN0_AN1_AN2_VSS_VREF" 2 274 "1" "A0 A1 A2 VRefh=A3"
d G "AN0_AN1_AN3" 2 275 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 276 "5" "A0 A1 VRefh=A3"
d G "ANALOG_RA3_REF" 2 277 "1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 278 "4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 279 "5" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 282 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 283 "1"
d G "ADC_READ_ONLY" 2 284 "6"
c L "set_adc_channel" 2 1 3 "FUNCTION"
v L "x" 2 290 "sint8" `136 
f B "abs" 2 290 "sint8(sint8 x)" `135 
v L "x" 2 291 "sint16" `138 
f G "abs" 2 291 "sint16(sint16 x)" `137 
v L "x" 2 292 "sint32" `140 
f G "abs" 2 292 "sint32(sint32 x)" `139 
v L "x" 2 293 "float" `142 
f G "abs" 2 293 "float(float x)" `141 
v L "??65535" 2 294 "int8" `144 
v L "??65535" 2 294 "int8" `145 
f B "_mul" 2 294 "int16(int8 ,int8 )" `143 
v L "??65535" 2 295 "sint8" `144 
v L "??65535" 2 295 "sint8" `148 
f G "_mul" 2 295 "sint16(sint8 ,sint8 )" `146 
v L "??65535" 2 296 "int16" `144 
v L "??65535" 2 296 "int16" `151 
f G "_mul" 2 296 "int32(int16 ,int16 )" `149 
v L "??65535" 2 297 "sint16" `144 
v L "??65535" 2 297 "sint16" `154 
f G "_mul" 2 297 "sint32(sint16 ,sint16 )" `152  "Memory Manipulation Prototypes:"
v L "bank" 2 300 "int8" `156 
v L "offset" 2 300 "int8" `157 
f B "read_bank" 2 300 "int8(int8 bank,int8 offset)" `155 
v L "bank" 2 301 "int8" `159 
v L "offset" 2 301 "int8" `160 
v L "value" 2 301 "int8" `161 
f B "write_bank" 2 301 "void(int8 bank,int8 offset,int8 value)" `158 
v L "dest" 2 302 "*int8" `163 
v L "src" 2 302 "*int8" `164 
f B "strcpy" 2 302 "void(*int8 dest,*int8 src)" `162 
v L "dest" 2 303 "*int8" `166 
v L "src" 2 303 "*int8" `167 
f B "strcopy" 2 303 "void(*int8 dest,*int8 src)" `165 
v L "destination" 2 304 "*int8" `169 
v L "value" 2 304 "int8" `170 
v L "num" 2 304 "int16" `171 
f B "memset" 2 304 "void(*int8 destination,int8 value,int16 num)" `168 
v L "destination" 2 305 "*int8" `173 
v L "source" 2 305 "*int8" `174 
v L "num" 2 305 "int16" `175 
f B "memcpy" 2 305 "void(*int8 destination,*int8 source,int16 num)" `172  "String Prototypes:"
v L "cvalue" 2 308 "int8" `177 
f B "toupper" 2 308 "int8(int8 cvalue)" `176 
v L "cvalue" 2 309 "int8" `179 
f B "tolower" 2 309 "int8(int8 cvalue)" `178 
v L "string" 2 310 "*int8" `181 
v L "cstring" 2 310 "*int8" `182 
f B "sprintf" 2 310 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `180  "Data Manipulators Prototypes:"
v L "address" 2 313 "*int8" `185 
v L "bytes" 2 313 "int8" `186 
v L "value" 2 313 "int8" `187 
f B "shift_left" 2 313 "int8(*int8 address,int8 bytes,int8 value)" `184 
v L "address" 2 314 "*int8" `189 
v L "bytes" 2 314 "int8" `190 
v L "value" 2 314 "int8" `191 
f B "shift_right" 2 314 "int8(*int8 address,int8 bytes,int8 value)" `188 
v L "address" 2 315 "*int8" `193 
v L "bytes" 2 315 "int8" `194 
f B "rotate_left" 2 315 "void(*int8 address,int8 bytes)" `192 
v L "address" 2 316 "*int8" `196 
v L "bytes" 2 316 "int8" `197 
f B "rotate_right" 2 316 "void(*int8 address,int8 bytes)" `195 
v L "value" 2 317 "int8" `199 
f B "swap" 2 317 "void(int8 value)" `198 
v L "var" 2 318 "int16" `201 
v L "offset" 2 318 "int8" `202 
f B "make8" 2 318 "int8(int16 var,int8 offset)" `200 
v L "var" 2 319 "int32" `201 
v L "offset" 2 319 "int8" `205 
f G "make8" 2 319 "int8(int32 var,int8 offset)" `203 
v L "varhigh" 2 320 "int8" `207 
v L "varlow" 2 320 "int8" `208 
f B "make16" 2 320 "int16(int8 varhigh,int8 varlow)" `206 
v L "var1" 2 321 "int16" `210 
f B "make32" 2 321 "int32(int16 var1)" `209 
v L "var1" 2 322 "int16" `212 
v L "var2" 2 322 "int16" `213 
f G "make32" 2 322 "int32(int16 var1,int16 var2)" `211 
v L "var1" 2 323 "int16" `212 
v L "var2" 2 323 "int8" `216 
f G "make32" 2 323 "int32(int16 var1,int8 var2)" `214 
v L "var1" 2 324 "int16" `218 
v L "var2" 2 324 "int8" `219 
v L "var3" 2 324 "int8" `220 
f G "make32" 2 324 "int32(int16 var1,int8 var2,int8 var3)" `217 
v L "var1" 2 325 "int8" `222 
f G "make32" 2 325 "int32(int8 var1)" `221 
v L "var1" 2 326 "int8" `212 
v L "var2" 2 326 "int8" `225 
f G "make32" 2 326 "int32(int8 var1,int8 var2)" `223 
v L "var1" 2 327 "int8" `218 
v L "var2" 2 327 "int8" `219 
v L "var3" 2 327 "int8" `229 
f G "make32" 2 327 "int32(int8 var1,int8 var2,int8 var3)" `226 
v L "var1" 2 328 "int8" `231 
v L "var2" 2 328 "int8" `232 
v L "var3" 2 328 "int8" `233 
v L "var4" 2 328 "int8" `234 
f G "make32" 2 328 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `230 
v L "var1" 2 329 "int8" `212 
v L "var2" 2 329 "int16" `237 
f G "make32" 2 329 "int32(int8 var1,int16 var2)" `235 
v L "var1" 2 330 "int8" `218 
v L "var2" 2 330 "int16" `219 
v L "var3" 2 330 "int8" `241 
f G "make32" 2 330 "int32(int8 var1,int16 var2,int8 var3)" `238 
v L "var1" 2 331 "int8" `218 
v L "var2" 2 331 "int8" `219 
v L "var3" 2 331 "int16" `245 
f G "make32" 2 331 "int32(int8 var1,int8 var2,int16 var3)" `242 
v L "var" 2 332 "int8" `247 
v L "bit" 2 332 "int8" `248 
f B "bit_set" 2 332 "void(int8 var,int8 bit)" `246 
v L "var" 2 333 "int16" `247 
v L "bit" 2 333 "int8" `251 
f G "bit_set" 2 333 "void(int16 var,int8 bit)" `249 
v L "var" 2 334 "int32" `247 
v L "bit" 2 334 "int8" `254 
f G "bit_set" 2 334 "void(int32 var,int8 bit)" `252 
v L "var" 2 335 "int8" `256 
v L "bit" 2 335 "int8" `257 
f B "bit_clear" 2 335 "void(int8 var,int8 bit)" `255 
v L "var" 2 336 "int16" `256 
v L "bit" 2 336 "int8" `260 
f G "bit_clear" 2 336 "void(int16 var,int8 bit)" `258 
v L "var" 2 337 "int32" `256 
v L "bit" 2 337 "int8" `263 
f G "bit_clear" 2 337 "void(int32 var,int8 bit)" `261 
v L "var" 2 338 "int8" `265 
v L "bit" 2 338 "int8" `266 
f B "bit_test" 2 338 "int8(int8 var,int8 bit)" `264 
v L "var" 2 339 "int16" `265 
v L "bit" 2 339 "int8" `269 
f G "bit_test" 2 339 "int8(int16 var,int8 bit)" `267 
v L "var" 2 340 "int32" `265 
v L "bit" 2 340 "int8" `272 
f G "bit_test" 2 340 "int8(int32 var,int8 bit)" `270  "#use delay() Prototypes:"
v L "count" 2 343 "int8" `274 
f B "delay_cycles" 2 343 "void(int8 count)" `273 
v L "time" 2 344 "int16" `276 
f B "delay_ms" 2 344 "void(int16 time)" `275 
v L "time" 2 345 "int16" `278 
f B "delay_us" 2 345 "void(int16 time)" `277  "#use rs232() Prototypes:"
v L "cdata" 2 348 "int8" `280 
f B "putchar" 2 348 "void(int8 cdata)" `279 
v L "cdata" 2 349 "int8" `282 
v L "stream" 2 349 "int8" `283 
f G "putchar" 2 349 "void(int8 cdata,int8 stream)" `281 
v L "string" 2 350 "*int8" `285 
f B "puts" 2 350 "void(*int8 string)" `284 
v L "string" 2 351 "*int8" `287 
v L "stream" 2 351 "int8" `288 
f G "puts" 2 351 "void(*int8 string,int8 stream)" `286 
f B "getch" 2 352 "int8()" `289 
v L "stream" 2 353 "int8" `291 
f G "getch" 2 353 "int8(int8 stream)" `290 
v L "string" 2 354 "*int8" `293 
f B "gets" 2 354 "void(*int8 string)" `292 
v L "string" 2 355 "*int8" `295 
v L "stream" 2 355 "int8" `296 
f G "gets" 2 355 "void(*int8 string,int8 stream)" `294 
f B "kbhit" 2 356 "int8()" `297 
v L "stream" 2 357 "int8" `299 
f G "kbhit" 2 357 "int8(int8 stream)" `298 
v L "string" 2 358 "*int8" `301 
f B "printf" 2 358 "void(*int8 string,*int8 _VA_LIST)" `300 
v L "stream" 2 359 "int8" `304 
v L "string" 2 359 "*int8" `305 
f B "fprintf" 2 359 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `303 
f B "putc_send" 2 360 "void()" `307 
v L "stream" 2 361 "int8" `309 
f B "fputc_send" 2 361 "void(int8 stream)" `308 
f B "rcv_buffer_full" 2 362 "int8()" `310 
v L "stream" 2 363 "int8" `312 
f G "rcv_buffer_full" 2 363 "int8(int8 stream)" `311 
f B "rcv_buffer_bytes" 2 364 "int16()" `313 
v L "stream" 2 365 "int8" `315 
f G "rcv_buffer_bytes" 2 365 "int16(int8 stream)" `314 
f B "tx_buffer_full" 2 366 "int8()" `316 
v L "stream" 2 367 "int8" `318 
f G "tx_buffer_full" 2 367 "int8(int8 stream)" `317 
f B "tx_buffer_bytes" 2 368 "int16()" `319 
v L "stream" 2 369 "int8" `321 
f G "tx_buffer_bytes" 2 369 "int16(int8 stream)" `320  "#use i2c() Prototypes:"
f B "i2c_read" 2 372 "int8()" `322 
v L "stream" 2 373 "int8" `324 
f G "i2c_read" 2 373 "int8(int8 stream)" `323 
v L "stream" 2 374 "int8" `326 
v L "ack" 2 374 "int8" `327 
f G "i2c_read" 2 374 "int8(int8 stream,int8 ack)" `325 
v L "data" 2 375 "int8" `329 
f B "i2c_write" 2 375 "int8(int8 data)" `328 
v L "stream" 2 376 "int8" `331 
v L "data" 2 376 "int8" `332 
f G "i2c_write" 2 376 "int8(int8 stream,int8 data)" `330 
f B "i2c_start" 2 377 "void()" `333 
v L "stream" 2 378 "int8" `335 
f G "i2c_start" 2 378 "void(int8 stream)" `334 
v L "stream" 2 379 "int8" `337 
v L "restart" 2 379 "int8" `338 
f G "i2c_start" 2 379 "void(int8 stream,int8 restart)" `336 
f B "i2c_stop" 2 380 "void()" `339 
v L "stream" 2 381 "int8" `341 
f G "i2c_stop" 2 381 "void(int8 stream)" `340 
f B "i2c_isr_state" 2 382 "int8()" `342 
v L "addr" 2 383 "int8" `344 
f B "i2c_slaveaddr" 2 383 "void(int8 addr)" `343 
v L "stream" 2 384 "int8" `346 
v L "addr" 2 384 "int8" `347 
f G "i2c_slaveaddr" 2 384 "void(int8 stream,int8 addr)" `345 
f B "i2c_poll" 2 385 "int8()" `348 
v L "stream" 2 386 "int8" `350 
f G "i2c_poll" 2 386 "int8(int8 stream)" `349 
v L "baud" 2 387 "int32" `352 
f B "i2c_init" 2 387 "void(int32 baud)" `351 
v L "stream" 2 388 "int8" `354 
v L "baud" 2 388 "int32" `355 
f G "i2c_init" 2 388 "void(int8 stream,int32 baud)" `353  "#use spi() Prototypes:"
f B "spi_xfer" 2 391 "int8()" `356 
f G "spi_xfer" 2 392 "int16()" `357 
f G "spi_xfer" 2 393 "int32()" `358 
v L "data" 2 394 "int8" `360 
f G "spi_xfer" 2 394 "int8(int8 data)" `359 
v L "data" 2 395 "int16" `362 
f G "spi_xfer" 2 395 "int16(int16 data)" `361 
v L "data" 2 396 "int32" `364 
f G "spi_xfer" 2 396 "int32(int32 data)" `363 
v L "stream" 2 397 "int8" `366 
v L "data" 2 397 "int8" `367 
f G "spi_xfer" 2 397 "int8(int8 stream,int8 data)" `365 
v L "stream" 2 398 "int8" `366 
v L "data" 2 398 "int16" `370 
f G "spi_xfer" 2 398 "int16(int8 stream,int16 data)" `368 
v L "stream" 2 399 "int8" `366 
v L "data" 2 399 "int32" `373 
f G "spi_xfer" 2 399 "int32(int8 stream,int32 data)" `371 
v L "stream" 2 400 "int8" `375 
v L "data" 2 400 "int8" `376 
v L "bits" 2 400 "int8" `377 
f G "spi_xfer" 2 400 "int8(int8 stream,int8 data,int8 bits)" `374 
v L "stream" 2 401 "int8" `375 
v L "data" 2 401 "int16" `376 
v L "bits" 2 401 "int8" `381 
f G "spi_xfer" 2 401 "int16(int8 stream,int16 data,int8 bits)" `378 
v L "stream" 2 402 "int8" `375 
v L "data" 2 402 "int32" `376 
v L "bits" 2 402 "int8" `385 
f G "spi_xfer" 2 402 "int32(int8 stream,int32 data,int8 bits)" `382 
v L "baud" 2 403 "int32" `387 
f B "spi_init" 2 403 "void(int32 baud)" `386 
v L "stream" 2 404 "int8" `389 
v L "baud" 2 404 "int32" `390 
f G "spi_init" 2 404 "void(int8 stream,int32 baud)" `388 
v L "baud" 2 405 "int32" `392 
f B "spi_speed" 2 405 "void(int32 baud)" `391 
v L "stream" 2 406 "int8" `394 
v L "baud" 2 406 "int32" `395 
f G "spi_speed" 2 406 "void(int8 stream,int32 baud)" `393 
v L "stream" 2 407 "int8" `397 
v L "baud" 2 407 "int32" `398 
v L "clock" 2 407 "int32" `399 
f G "spi_speed" 2 407 "void(int8 stream,int32 baud,int32 clock)" `396 
v L "data" 2 408 "int8" `401 
f B "spi_prewrite" 2 408 "void(int8 data)" `400 
v L "data" 2 409 "int16" `403 
f G "spi_prewrite" 2 409 "void(int16 data)" `402 
v L "data" 2 410 "int32" `405 
f G "spi_prewrite" 2 410 "void(int32 data)" `404 
v L "??65535" 2 411 "int8" `407 
v L "data" 2 411 "int8" `408 
f G "spi_prewrite" 2 411 "void(int8 ,int8 data)" `406 
v L "??65535" 2 412 "int8" `407 
v L "data" 2 412 "int16" `411 
f G "spi_prewrite" 2 412 "void(int8 ,int16 data)" `409 
v L "??65535" 2 413 "int8" `407 
v L "data" 2 413 "int32" `414 
f G "spi_prewrite" 2 413 "void(int8 ,int32 data)" `412 
f B "spi_xfer_in" 2 414 "int8()" `415 
f G "spi_xfer_in" 2 415 "int16()" `416 
f G "spi_xfer_in" 2 416 "int32()" `417 
v L "bits" 2 417 "int8" `419 
f G "spi_xfer_in" 2 417 "int8(int8 bits)" `418 
v L "bits" 2 418 "int8" `421 
f G "spi_xfer_in" 2 418 "int16(int8 bits)" `420 
v L "bits" 2 419 "int8" `423 
f G "spi_xfer_in" 2 419 "int32(int8 bits)" `422 
v L "stream" 2 420 "int8" `425 
v L "bits" 2 420 "int8" `426 
f G "spi_xfer_in" 2 420 "int8(int8 stream,int8 bits)" `424 
v L "stream" 2 421 "int8" `425 
v L "bits" 2 421 "int8" `429 
f G "spi_xfer_in" 2 421 "int16(int8 stream,int8 bits)" `427 
v L "stream" 2 422 "int8" `425 
v L "bits" 2 422 "int8" `432 
f G "spi_xfer_in" 2 422 "int32(int8 stream,int8 bits)" `430  "#use rtos() Prototypes:"
f B "rtos_run" 2 425 "void()" `433 
f B "rtos_yield" 2 426 "void()" `434 
v L "task" 2 427 "int8" `436 
f B "rtos_enable" 2 427 "void(int8 task)" `435 
v L "task" 2 428 "int8" `438 
f B "rtos_disable" 2 428 "void(int8 task)" `437 
f B "rtos_terminate" 2 429 "void()" `439 
v L "flag" 2 430 "int8" `441 
f B "rtos_await" 2 430 "void(int8 flag)" `440 
v L "sem" 2 431 "int8" `443 
f B "rtos_wait" 2 431 "void(int8 sem)" `442 
v L "sem" 2 432 "int8" `445 
f B "rtos_signal" 2 432 "void(int8 sem)" `444 
v L "task" 2 433 "int8" `447 
v L "msg" 2 433 "int8" `448 
f B "rtos_msg_send" 2 433 "void(int8 task,int8 msg)" `446 
f B "rtos_msg_read" 2 434 "int8()" `449 
f B "rtos_msg_poll" 2 435 "int8()" `450 
v L "task" 2 436 "int8" `452 
f B "rtos_overrun" 2 436 "int8(int8 task)" `451 
v L "task" 2 437 "int8" `454 
v L "stat" 2 437 "*int8" `455 
f B "rtos_stats" 2 437 "void(int8 task,*int8 stat)" `453  "#use timer() Prototypes:"
f B "get_ticks" 2 440 "int8()" `456 
f G "get_ticks" 2 441 "int16()" `457 
f G "get_ticks" 2 442 "int32()" `458 
v L "stream" 2 443 "int8" `460 
f G "get_ticks" 2 443 "int8(int8 stream)" `459 
v L "stream" 2 444 "int8" `462 
f G "get_ticks" 2 444 "int16(int8 stream)" `461 
v L "stream" 2 445 "int8" `464 
f G "get_ticks" 2 445 "int32(int8 stream)" `463 
v L "value" 2 446 "int8" `466 
f B "set_ticks" 2 446 "void(int8 value)" `465 
v L "value" 2 447 "int16" `468 
f G "set_ticks" 2 447 "void(int16 value)" `467 
v L "value" 2 448 "int32" `470 
f G "set_ticks" 2 448 "void(int32 value)" `469 
v L "stream" 2 449 "int8" `472 
v L "value" 2 449 "int8" `473 
f G "set_ticks" 2 449 "void(int8 stream,int8 value)" `471 
v L "stream" 2 450 "int8" `472 
v L "value" 2 450 "int16" `476 
f G "set_ticks" 2 450 "void(int8 stream,int16 value)" `474 
v L "stream" 2 451 "int8" `472 
v L "value" 2 451 "int32" `479 
f G "set_ticks" 2 451 "void(int8 stream,int32 value)" `477  "#use pwm() Prototypes:"
f B "pwm_on" 2 454 "void()" `480 
v L "stream" 2 455 "int8" `482 
f G "pwm_on" 2 455 "void(int8 stream)" `481 
f B "pwm_off" 2 456 "void()" `483 
v L "stream" 2 457 "int8" `485 
f G "pwm_off" 2 457 "void(int8 stream)" `484 
v L "duty" 2 458 "int16" `487 
f B "pwm_set_duty" 2 458 "void(int16 duty)" `486 
v L "stream" 2 459 "int8" `489 
v L "duty" 2 459 "int16" `490 
f G "pwm_set_duty" 2 459 "void(int8 stream,int16 duty)" `488 
v L "percent" 2 460 "int16" `492 
f B "pwm_set_duty_percent" 2 460 "void(int16 percent)" `491 
v L "stream" 2 461 "int8" `494 
v L "percent" 2 461 "int16" `495 
f G "pwm_set_duty_percent" 2 461 "void(int8 stream,int16 percent)" `493 
v L "frequency" 2 462 "int32" `497 
f B "pwm_set_frequency" 2 462 "void(int32 frequency)" `496 
v L "stream" 2 463 "int8" `499 
v L "frequency" 2 463 "int32" `500 
f G "pwm_set_frequency" 2 463 "void(int8 stream,int32 frequency)" `498  "#use capture() Prototypes:"
f B "get_capture_time" 2 466 "int16()" `501 
v L "stream" 2 467 "int8" `503 
f G "get_capture_time" 2 467 "int16(int8 stream)" `502 
f B "get_capture_event" 2 468 "int8()" `504 
v L "stream" 2 469 "int8" `506 
f G "get_capture_event" 2 469 "int8(int8 stream)" `505  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
v L "address" 2 482 "int16" `508 
f B "goto_address" 2 482 "void(int16 address)" `507 
v L "label" 2 483 "int16" `510 
f B "label_address" 2 483 "int16(int16 label)" `509  "INT"
c L "label_address" 2 1 4 "FUNCTION"
v L "interrupt" 2 490 "int32" `512 
f B "enable_interrupts" 2 490 "void(int32 interrupt)" `511 
v L "interrupt" 2 491 "int32" `514 
f B "disable_interrupts" 2 491 "void(int32 interrupt)" `513 
v L "interrupt" 2 492 "int32" `516 
f B "clear_interrupt" 2 492 "void(int32 interrupt)" `515 
v L "interrupt" 2 493 "int32" `518 
f B "interrupt_active" 2 493 "int8(int32 interrupt)" `517 
v L "interrupt" 2 494 "int32" `520 
f B "interrupt_enabled" 2 494 "int8(int32 interrupt)" `519 
v L "source" 2 495 "int8" `522 
v L "edge" 2 495 "int8" `523 
f B "ext_int_edge" 2 495 "void(int8 source,int8 edge)" `521 
v L "address" 2 496 "int16" `525 
f B "jump_to_irs" 2 496 "void(int16 address)" `524  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 498 "0x40"
d G "H_TO_L" 2 499 "0"
d G "GLOBAL" 2 501 "0x0BC0"
d G "PERIPH" 2 502 "0x0B40"
d G "INT_RTCC" 2 503 "0x000B20"
d G "INT_RB" 2 504 "0x00FF0B08"
d G "INT_EXT_L2H" 2 505 "0x50000B10"
d G "INT_EXT_H2L" 2 506 "0x60000B10"
d G "INT_EXT" 2 507 "0x000B10"
d G "INT_AD" 2 508 "0x008C40"
d G "INT_TIMER1" 2 509 "0x008C01"
d G "INT_TIMER2" 2 510 "0x008C02"
d G "INT_CCP1" 2 511 "0x008C04"
d G "INT_TIMER0" 2 512 "0x000B20"
D G "Delta" 0 21 "PIN_A0"
D G "Theta" 0 22 "PIN_A1"
D G "Alfa" 0 23 "PIN_A2"
D G "Beta" 0 24 "PIN_A3"
D G "Gamma" 0 25 "PIN_B3"
D G "Fund" 0 27 "PIN_B1"
D G "Binau" 0 28 "PIN_B2"
C L "jump_to_irs" 0 20 1 "FUNCTION"
V G "CONTADOR" 0 31 "int8" `530 
C L "jump_to_irs" 0 20 1 "FUNCTION"
V G "TM1" 0 32 "int8" `531 
C L "jump_to_irs" 0 20 1 "FUNCTION"
F G "EXT" 0 36 "void()" `532 
C L "EXT" 0 20 1 "FUNCTION"
C L "EXT" 0 20 1 "FUNCTION"
C L "EXT" 0 20 1 "FUNCTION"
F G "TIMER_0" 0 47 "void()" `533 
C L "TIMER_0" 0 20 1 "FUNCTION"
C L "TIMER_0" 0 20 1 "FUNCTION"
F G "reset_timer" 0 60 "void()" `534 
C L "reset_timer" 0 20 1 "FUNCTION"
C L "reset_timer" 0 20 1 "FUNCTION"
C L "reset_timer" 0 20 1 "FUNCTION"
C L "reset_timer" 0 20 1 "FUNCTION"
C L "reset_timer" 0 20 1 "FUNCTION"
C L "reset_timer" 0 20 1 "FUNCTION"
F G "MAIN" 0 81 "void()" `535 
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 2 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
C L "MAIN" 0 20 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
